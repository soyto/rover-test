{"version":3,"sources":["components/layout/Header.js","components/layout/Title.js","helpers/constants.js","components/SetDimensionsPanel.js","services/parseRoverInstruction.js","components/RoverInputControlsPanel.js","services/validateRoverInputs.js","components/RoverOutputControlsPanel.js","components/RoverControlPanel.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","displayName","Title","title","useEffect","window","document","className","cx","SetDimensionsPanel","initialHeight","initialWidth","onDimensionsSet","useState","height","setHeight","width","setWidth","isHeightValid","setIsHeightValid","heightValidationError","setHeightValidationError","isWidthValid","setIsWidthValid","widthValidationError","setWidthValidationError","validateInput","input","value","parseFloat","isNaN","Number","isInteger","Card","Body","Form","Group","controlId","Label","Control","type","placeholder","defaultValue","onChange","evt","msg","target","isInvalid","Text","Feedback","Button","onClick","preventDefault","stopPropagation","parseInt","parseRoverInstruction","roverPosition","roverAreaDimension","instruction","x","y","heading","checkWithinArea","result","position","parseAdvanceRover","parseRotateRover","direction","headings","numericDirection","outcomeHeadingIndex","indexOf","length","RoverInputControlsPanel","onAction","instructions","setInstructions","areInstructionsValid","setAreInstructionValids","instructionErrors","setInstructionErrors","as","rows","map","i","errors","currentChar","toLowerCase","push","validateRoverInputs","split","filter","toUpperCase","transformCardinals","cardinal","RoverOutputControlsPanel","roverInitialPosition","setRoverPosition","roverInstructionResults","setRoverInstructionResults","instructionResults","instructionResult","ListGroup","Item","STATE_SET_DIMENSIONS","INITIAL_ROVER_POSITION","instructionsReducer","state","action","concat","values","RoverControlPanel","setState","roverAreaWidth","setRoverAreaWidth","roverAreaHeight","setRoverAreaHeight","useReducer","dispatchInstructions","Row","Col","xs","md","span","offset","App","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b1d94466.chunk.js","sourcesContent":["import {Navbar} from 'react-bootstrap';\r\n\r\n/**\r\n * Renders the header component\r\n * @return {ReactDOM}\r\n */\r\nfunction Header() {\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>Rover test</Navbar.Brand>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nHeader.displayName = 'Header';\r\nHeader.propTypes = {\r\n\r\n};\r\nexport default Header;","import PropTypes from 'prop-types';\r\nimport cx from 'classnames';\r\nimport { prefix } from 'helpers/constants';\r\nimport {useEffect} from 'react';\r\n\r\n\r\n/**\r\n * Renders the title\r\n * @param {*} param0 \r\n * @return {ReactDOM}\r\n */\r\nfunction Title({title}) {\r\n\r\n    useEffect(() => {\r\n        window.document.title = title;\r\n    });\r\n\r\n    return (\r\n        <h1 className={cx(`${prefix}page-title`)}>{title}</h1>\r\n    )\r\n};\r\n\r\n\r\nTitle.displayName = 'Title';\r\nTitle.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Title;","const prefix = 'rt-';\r\n\r\nexport {\r\n    prefix,\r\n};","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nimport {Card, Button, Form} from 'react-bootstrap';\r\n\r\n/**\r\n * Renders the set dimensions panel.\r\n * @param {*} param0 \r\n * @return {ReactDOM}\r\n */\r\nfunction SetDimensionsPanel({initialHeight, initialWidth, onDimensionsSet}) {\r\n    const [height, setHeight] = useState(initialHeight);\r\n    const [width, setWidth] = useState(initialWidth);\r\n    const [isHeightValid, setIsHeightValid] = useState(true);\r\n    const [heightValidationError, setHeightValidationError] = useState(null);\r\n    const [isWidthValid, setIsWidthValid] = useState(true);\r\n    const [widthValidationError, setWidthValidationError] = useState(null);\r\n\r\n    /**\r\n     * Validates the input\r\n     * @param {number} input \r\n     * @return {string|null} string if is not valid, null if is valid\r\n     */\r\n    const validateInput = (input) => {\r\n        const value = parseFloat(input);\r\n        if (isNaN(value)) {\r\n             return 'You should set this value';\r\n        }\r\n        else if (!Number.isInteger(value)) {\r\n            return 'Only integer values are allowed';\r\n        }\r\n        else if (value <= 0) {\r\n            return 'Value should be greater than zero';\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the height error\r\n     * @param {string} msg \r\n     */\r\n    const setHeightError = (msg) => {\r\n        if (!msg) {\r\n            setIsHeightValid(true);\r\n            setHeightValidationError(null);\r\n        } else {\r\n            setIsHeightValid(false);\r\n            setHeightValidationError(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the width error\r\n     * @param {*} msg \r\n     */\r\n    const setWidthError = (msg) => {\r\n        if (!msg) {\r\n            setIsWidthValid(true);\r\n            setWidthValidationError(null);\r\n        } else {\r\n            setIsWidthValid(false);\r\n            setWidthValidationError(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Whenever the height value changes.\r\n     * @param {*} evt \r\n     */\r\n    const onHeightChange = (evt) => {\r\n        const value = evt.target.value;\r\n        setHeight(value);\r\n        setHeightError(validateInput(value));\r\n    }\r\n\r\n    /**\r\n     * Whenever the height value changes.\r\n     * @param {*} evt \r\n     */\r\n     const onWidthChange = (evt) => {\r\n        const value = evt.target.value;\r\n        setWidth(value);\r\n        setWidthError(validateInput(value));\r\n    }\r\n\r\n    /**\r\n     * Whenever the user clicks on the set dimensions button\r\n     * @param {*} evt \r\n     */\r\n    const onSetDimensionsButtonClick = (evt) => {\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n        \r\n        // If height is not valid\r\n        if (validateInput(height) !== null) { return; }\r\n\r\n        // If width is not valid\r\n        if (validateInput(width) !== null) { return; }\r\n\r\n        // Notify parents element\r\n        onDimensionsSet({\r\n            height: parseInt(height),\r\n            width: parseInt(width)\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title>Set the dimensions of the rover area</Card.Title>\r\n                <Form>\r\n                    <Form.Group controlId=\"height\">\r\n                        <Form.Label>Height</Form.Label>\r\n                        <Form.Control \r\n                            type=\"number\" \r\n                            placeholder={height} \r\n                            defaultValue={height}\r\n                            onChange={onHeightChange} \r\n                            isInvalid={!isHeightValid}/>\r\n                        <Form.Text className=\"text-muted\">\r\n                            The height of the rover area\r\n                        </Form.Text>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {heightValidationError}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"width\">\r\n                        <Form.Label>Width</Form.Label>\r\n                        <Form.Control \r\n                            type=\"number\" \r\n                            placeholder={width} \r\n                            defaultValue={width}\r\n                            onChange={onWidthChange} \r\n                            isInvalid={!isWidthValid}/>\r\n                        <Form.Text className=\"text-muted\">\r\n                            The width of the rover area\r\n                        </Form.Text>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {widthValidationError}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Button type=\"submit\" onClick={onSetDimensionsButtonClick}>Set dimensions</Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n       \r\n    );\r\n}\r\n\r\nSetDimensionsPanel.displayName = 'SetDimensionsPanel';\r\nSetDimensionsPanel.propTypes = {\r\n    onDimensionsSet: PropTypes.func.isRequired,\r\n    initialWidth: PropTypes.number.isRequired,\r\n    initialHeight: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SetDimensionsPanel;","/**\r\n * Parses a rover instruction\r\n * @param {*} roverPosition \r\n * @param {*} roverAreaDimension \r\n * @param {*} instruction \r\n * @return {*} object containing the result of the instruction as result, and the new rover position.\r\n */\r\nexport default function parseRoverInstruction(roverPosition, roverAreaDimension, instruction) {\r\n    switch (instruction) {\r\n        case 'A': return parseAdvanceRover({roverPosition, roverAreaDimension});\r\n        case 'L': return parseRotateRover({roverPosition, roverAreaDimension, direction: instruction});\r\n        case 'R': return parseRotateRover({roverPosition, direction: instruction});\r\n        default: return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks that the new x and y are within the area\r\n * @param {*} param0 \r\n */\r\nfunction checkWithinArea({x, y, height, width}) {\r\n    if (y < 0 || y > height) { return false; }\r\n    if (x < 0 || x > width) { return false; }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Parses when needs to move forward the rover\r\n * @param {*} param0 \r\n * @return {*} a rover instruction\r\n */\r\nfunction parseAdvanceRover({roverPosition, roverAreaDimension}) {\r\n    let { x, y, heading } = roverPosition;\r\n    const { width, height } = roverAreaDimension;\r\n\r\n    switch (heading) {\r\n        case 'N': y += 1; break;\r\n        case 'S': y -= 1; break;\r\n        case 'W': x -= 1; break;\r\n        case 'E': x += 1; break;\r\n        default: break;\r\n    }\r\n\r\n    if (!checkWithinArea({x, y, height, width})) {\r\n        return {\r\n            result: false,\r\n            position: {...roverPosition}\r\n        }\r\n    } else {\r\n        return {\r\n            result: true,\r\n            position: {\r\n                x,\r\n                y,\r\n                heading\r\n            }\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Parses when the rover needs to rotate\r\n * @param {*} param0 \r\n */\r\nfunction parseRotateRover({roverPosition, direction}) {\r\n    let { x, y, heading } = roverPosition;\r\n    const headings = ['N', 'E', 'S', 'W'];\r\n    const numericDirection = direction === 'L' ? -1 : 1;\r\n    let outcomeHeadingIndex = headings.indexOf(heading) + numericDirection;\r\n\r\n    if (outcomeHeadingIndex < 0) {\r\n        outcomeHeadingIndex = headings.length -1;\r\n    }\r\n    else if(outcomeHeadingIndex === headings.length) {\r\n        outcomeHeadingIndex = 0;\r\n    }\r\n\r\n    return {\r\n        result: true,\r\n        position:{\r\n            x,\r\n            y,\r\n            heading: headings[outcomeHeadingIndex]\r\n        }\r\n    }\r\n}","import PropTypes from 'prop-types';\r\n\r\nimport { useState } from 'react';\r\nimport { validateRoverInputs } from 'services';\r\nimport { Card, Button, Form } from 'react-bootstrap';\r\n\r\n/**\r\n * Renders the rover input controls\r\n * @param {*} param0 \r\n */\r\nfunction RoverInputControlsPanel({onAction}) {\r\n    const [instructions, setInstructions] = useState('');\r\n    const [areInstructionsValid, setAreInstructionValids] = useState(true);\r\n    const [instructionErrors, setInstructionErrors] = useState(null);\r\n\r\n    /**\r\n     * Whenever the user attempts to send the instructions\r\n     */\r\n    const onSendInstructionsClick = () => {\r\n        const errors = validateRoverInputs(instructions);\r\n\r\n        if (errors.length > 0) {\r\n            setAreInstructionValids(false);\r\n            setInstructionErrors(errors);\r\n        }\r\n        else {\r\n            setAreInstructionValids(true);\r\n            setInstructionErrors(null);\r\n            onAction({\r\n                type: 'instructions',\r\n                instructions: instructions.split('')\r\n                    .filter(x => 'alr'.indexOf(x.toLowerCase()) >= 0)\r\n                    .map(x => x.toUpperCase()),\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Whenever the user clicks on the reset position.\r\n     */\r\n    const onResetPositionClick = () => {\r\n        onAction({\r\n            type: 'reset-position'\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Whenever the user clicks on reset dimensions.\r\n     */\r\n    const onResetDimensionsClick = () => {\r\n        onAction({\r\n            type: 'reset-dimensions'\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title>Input</Card.Title>\r\n\r\n                <Form>\r\n\r\n                    <Form.Group controlId=\"instructions\">\r\n                        <Form.Label>Instructions</Form.Label>\r\n                        <Form.Control \r\n                            as=\"textarea\" \r\n                            rows={3}\r\n                            onChange={evt => setInstructions(evt.target.value)}\r\n                            isInvalid={!areInstructionsValid} />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {instructionErrors && (\r\n                                <ul>\r\n                                    {instructionErrors.map((x, i) => (<li key={i}>{x}</li>) ) }\r\n                                </ul>\r\n                            )}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <Button onClick={onSendInstructionsClick}>Send instructions</Button>\r\n                        <Button variant=\"secondary\" onClick={onResetPositionClick}>Reset position</Button>\r\n                        <Button variant=\"outline-secondary\" onClick={onResetDimensionsClick}>Reset dimensions</Button>\r\n                    </div>\r\n                    \r\n\r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nRoverInputControlsPanel.displayName = 'RoverInputControlsPanel';\r\nRoverInputControlsPanel.propTypes = {\r\n    /**\r\n     * Whenever the control panel wants to do an action\r\n     */\r\n    onAction: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RoverInputControlsPanel;","/**\r\n * Validates rover inputs\r\n * @param {*} input \r\n * @return {array} array of strings with the invalid items. If contains no items means that is valid\r\n */\r\nexport default function validateRoverInputs(input) {\r\n    const errors = [];\r\n\r\n    for (let i = 0; i < input.length; i++) {\r\n        const currentChar = input[i];\r\n\r\n        if ('alr '.indexOf(currentChar.toLowerCase()) < 0) {\r\n            errors.push(`The instruction number ${i + 1} cannot be ${currentChar}, only 'A', 'L', and 'R' are valid instructions`);\r\n        }\r\n    }\r\n\r\n    return errors;\r\n\r\n}","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { parseRoverInstruction } from 'services';\r\nimport { Card, ListGroup } from 'react-bootstrap';\r\n\r\n/**\r\n * Transforms the cardinal to something user friendly\r\n * @param {*} cardinal \r\n * @returns \r\n */\r\nfunction transformCardinals(cardinal) {\r\n    switch (cardinal) {\r\n        case 'N': return 'North';\r\n        case 'W': return 'West';\r\n        case 'S': return 'South';\r\n        case 'E': return 'East';\r\n        default: return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Renders the rover input controls\r\n * @param {*} param0 \r\n */\r\nfunction RoverOutputControlsPanel({roverInitialPosition, instructions, roverAreaDimension}) {\r\n    const [roverPosition, setRoverPosition] = useState(roverInitialPosition);\r\n    const [roverInstructionResults, setRoverInstructionResults] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let roverPosition = {...roverInitialPosition};\r\n        const instructionResults = [];\r\n\r\n        for(let instruction of instructions) {\r\n            const instructionResult = parseRoverInstruction(roverPosition, roverAreaDimension, instruction);\r\n\r\n            // Set the new position\r\n            roverPosition = instructionResult.position;\r\n\r\n            // Add the result into the instruction results\r\n            instructionResults.push(instructionResult);\r\n        }\r\n\r\n        setRoverPosition(roverPosition);\r\n        setRoverInstructionResults(instructionResults);\r\n    }, [instructions]);\r\n    \r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title>Output</Card.Title>\r\n                <b>\r\n                    Current Rover position: [{roverPosition.x}, {roverPosition.y}] heading [{transformCardinals(roverPosition.heading)}]\r\n                </b>\r\n                <ListGroup>\r\n                    {roverInstructionResults.map( (x, i) => (\r\n                        <ListGroup.Item variant={x.result ? \"\" : \"danger\"} key={i}>\r\n                            Position: [{x.position.x}, {x.position.y}], heading [{transformCardinals(x.position.heading)}]\r\n                            <br />\r\n                            <pre>({x.result ? 'True': 'False'}, {x.position.heading}, ({x.position.x}, {x.position.y}))</pre>\r\n                        </ListGroup.Item>\r\n                    ))}\r\n                </ListGroup>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nRoverOutputControlsPanel.displayName = 'RoverOutputControlsPanel';\r\nRoverOutputControlsPanel.propTypes = {\r\n    /**\r\n     * Initial rover position\r\n     */\r\n     roverInitialPosition: PropTypes.object.isRequired,\r\n\r\n     /**\r\n      * The isntructions\r\n      */\r\n     instructions: PropTypes.array.isRequired,\r\n\r\n     /**\r\n      * The rover area dimension\r\n      */\r\n    roverAreaDimension: PropTypes.object.isRequired\r\n};\r\n\r\nexport default RoverOutputControlsPanel;","import { useState, useReducer } from 'react';\r\n\r\nimport SetDimensionsPanel from './SetDimensionsPanel';\r\nimport RoverInputControlsPanel from './RoverInputControlsPanel';\r\nimport RoverOutputControlsPanel from './RoverOutputControlsPanel';\r\n\r\nimport {\r\n    Row, Col\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst STATE_SET_DIMENSIONS = 'set-dimensions';\r\nconst STATE_ROVER_CALCULATIONS = 'rover-calculations';\r\n\r\nconst INITIAL_ROVER_POSITION = {\r\n    x: 0,\r\n    y: 0,\r\n    heading: 'N'\r\n};\r\n\r\n/**\r\n * Reducer for the instructions\r\n */\r\nfunction instructionsReducer(state, action) {\r\n    const { type } = action;\r\n\r\n    switch (type) {\r\n        case 'add': \r\n            return state.concat(action.values);\r\n\r\n        case 'empty':\r\n            return [];\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n/**\r\n * Renders the rover control panel\r\n * @return {ReactDOM}\r\n */\r\nfunction RoverControlPanel() {\r\n    const [state, setState] = useState(STATE_SET_DIMENSIONS);\r\n    const [roverAreaWidth, setRoverAreaWidth] = useState(300);\r\n    const [roverAreaHeight, setRoverAreaHeight] = useState(300);\r\n    const [roverPosition] = useState(INITIAL_ROVER_POSITION);\r\n    const [instructions, dispatchInstructions] = useReducer(instructionsReducer, []);\r\n\r\n    /**\r\n     * When the user sets the dimensions of the rover area\r\n     * @param {*} param0 \r\n     */\r\n    const onSetDimensionsPanelSetDimensionsSet = ({width, height}) => {\r\n        setRoverAreaWidth(width);\r\n        setRoverAreaHeight(height);\r\n        setState(STATE_ROVER_CALCULATIONS)\r\n    };\r\n\r\n    /**\r\n     * Whenever the controls panel wants to perform an action\r\n     * @param {*} action \r\n     */\r\n    const onInputControlsPanelAction = (action) => {\r\n        const {type} = action;\r\n\r\n        switch (type) {\r\n\r\n            case 'instructions':\r\n                // Dispatch the instructions into the reducer\r\n                dispatchInstructions({\r\n                    type: 'add',\r\n                    values: action.instructions\r\n                });\r\n\r\n                break;\r\n\r\n            case 'reset-position':\r\n                // Just reset the rover position to the initial one\r\n                dispatchInstructions({type: 'empty'});\r\n                break;\r\n                \r\n            case 'reset-dimensions':\r\n                // Just change the state\r\n                setState(STATE_SET_DIMENSIONS);\r\n                break;\r\n\r\n            default: \r\n                break;\r\n        }\r\n    };\r\n\r\n\r\n    // If the state is initial we should show the get dimensions panel.\r\n    if (state === STATE_SET_DIMENSIONS) {\r\n        return (\r\n            <Row>\r\n                <Col xs md={{span: 4, offset: 4}}>\r\n                <SetDimensionsPanel \r\n                    initialHeight={roverAreaHeight}\r\n                    initialWidth={roverAreaWidth}\r\n                    onDimensionsSet={onSetDimensionsPanelSetDimensionsSet} />\r\n                </Col>\r\n            </Row>\r\n           \r\n        );\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <RoverInputControlsPanel onAction={onInputControlsPanelAction} />\r\n            </Col>\r\n            <Col xs={12} md={6} className={`mt-4 mt-md-0`}>\r\n                <RoverOutputControlsPanel \r\n                    roverInitialPosition={roverPosition}\r\n                    instructions={instructions}\r\n                    roverAreaDimension={{\r\n                        width: roverAreaWidth,\r\n                        height: roverAreaHeight\r\n                    }} />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nRoverControlPanel.displayName = 'RoverControlPanel';\r\nRoverControlPanel.propTypes = {\r\n\r\n};\r\nexport default RoverControlPanel;","\nimport { Header, Title } from 'components/layout';\nimport {RoverControlPanel} from 'components';\n\nimport {\n  Container\n} from 'react-bootstrap';\n\n/**\n * Application component\n * @return {ReactDOM}\n */\nfunction App() {\n  return (\n    <>\n    <Header />\n    <Container fluid>\n      <Title title=\"Rover test\" />\n      <RoverControlPanel />\n    </Container>\n    </>\n  );\n}\n\nApp.displayName = 'App';\nApp.propTypes = {\n\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}